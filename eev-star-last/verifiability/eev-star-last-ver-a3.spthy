/*
***************************************************************************** 

Estonian E-Voting Protocol (EEV-star-last) specification for verifying 
verifiability properties for the adversary model A3:

- A3 corrupts voters and VoteApp:

  - Corrupt voters leak the information on their EID cards. 
  - Corrupt VoteApp allows adversary to decide the parameters 
  for the ballot to be cast.

- This model specifies an honest network, i.e. the communication 
between parties is through private channels. To model private 
channels, we use the linear facts Ch# in the rules. 

- Individual verification of the last ballot stored is allowed 
within the specified timeframe. We model this with an additional
restriction specified for the rule VerApp_ver. 

- We check the following properties:

  - Ballot Integrity (BI),
  - Individual Verifiability 1 (IV1),
  - Individual Verifiability 3 (IV3),
  - Eligibility Verifiability (ELI),  
  - Result Integrity 1 (RES1), 
  - Result Integrity 2 (RES2), and
  - Consistency (ONE), 

where except BI, 
  
  - IV1 & IV3 & ELI & RES1 & ONE

correpond to strong E2E verifiability, and

  - IV1 & IV3 & ELI & RES2 & ONE
  
correspond to weak E2E verifiability from the paper 
"Election Verifiability in Receipt-free Voting Protocols" 
by Baloglu et al.

-----------------------------------------------------------------------------

Verification Results:

- Success: RES1: falsified; BI, IV1, IV3, ELI, RES2, ONE: verified
- Execution Time: 18.549s
- Attacks: Ballot stuffing for the voters who did not verify 
- Outcome: Ballot integrity is satisfied.
           Weak E2E verifiability is satisfied.

-----------------------------------------------------------------------------

analyzed: eev-star-last-ver-a3.spthy

  processing time: 18.43s
  
  Ballot_Integrity (all-traces): verified (4 steps)
  Individual_Verifiability_1 (all-traces): verified (28 steps)
  Individual_Verifiability_3 (all-traces): verified (4 steps)
  Eligibility_Verifiability (all-traces): verified (4 steps)
  Result_Integrity_1 (all-traces): falsified - found trace (7 steps)
  Result_Integrity_2 (all-traces): verified (139 steps)
  Consistency_One (all-traces): verified (2 steps)

*****************************************************************************
*/

theory EEV_Star_Last_Verifiability_A3
begin
 
builtins: asymmetric-encryption, signing, hashing, natural-numbers

functions: enc/3, dec/2, zkp/4, ver/4

equations: dec(enc(m, pk(skE), r), skE) = m,
           ver(zkp(enc(m, pkE, r), m, r, pkid), enc(m, pkE, r), pkE, pkid) = true
              

// RA  : Registration Authority
// EO  : Election Organizer
// RS  : Registration Service
// TMS : Time Marking Service
// VC  : Vote Collector
// IBBP: I-Ballot Box Processor


// SETUP 


// In EEV, the voters use their EID card to authenticate 
// themselves to VC and also to sign their ballots. The 
// following rule models the creation of an EID card for 
// each identity and a valid certificate for their public 
// key recorded in the EID card. 


rule RA_EID: //creates an EID per identity 
  let 
      pkid = pk(~skid) //public key of the identity
  in
    [ In(id), Fr(~skid) ] 
  --[ OnlyOnce(<id, 'EID'>) ]-> 
    [ !CertID(id, pkid), !EID(id, pkid, ~skid), Out(<id, pkid>) ]


rule EO_key: //generates a key pair for the election
  let
      pkE = pk(~skE) //public key of the election
  in
    [ Fr(~skE) ] 
  --[ BB_key(pkE), OnlyOnce('key') ]-> 
    [ !PkE(pkE), !SkE(~skE), Out(pkE) ]


rule E0_cand: //determines candidates for the election
    [ In(v) ] --[  ]-> [ !Cand(v) ]


rule E0_voter: //determines voters eligible to vote
    [ In(id), !CertID(id, pkid) ] 
  --[ BB_reg(id) ]-> 
    [ !Voter(id) ]


rule RS_cert: //generates a key pair and gets certified
  let
      pkRS = pk(~skRS) //public key of RS
  in
    [ Fr(~skRS) ] 
  --[ OnlyOnce('RScert') ]-> 
    [ !CertRS(pkRS), !SkRS(~skRS), Out(pkRS) ]


rule VC_cert: //generates a key pair and gets certified
  let
      pkVC = pk(~skVC) //public key of VC
  in
    [ Fr(~skVC) ] 
  --[ OnlyOnce('VCcert') ]-> 
    [ !CertVC(pkVC), !SkVC(~skVC), Out(pkVC) ]


rule Corrupt_Voter_leak: //leaks EID to the adversary
    [ !Voter(id), !EID(id, pkid, skid) ] 
  --[ Corr(id) ]-> 
    [ Out(<id, pkid, skid>) ]


// In EEV, time is used to mark the ballot and decide 
// the last ballot of the voter. It is also used to 
// start/end the individual verification timeframe 
// for the voter. The following rules start and stream 
// the general public time and allow the protocol 
// parties and voters to use it. Time is modelled 
// as a counter, incremented by one whenever the rule 
// Stream_time is executed. 

rule Start_time: //starts time 
    [ In(%t) ] 
  --[ OnlyOnce('start'), CurrentTime(%t) ]-> 
    [ Time(%t), !GetTime(%t) ]


rule Stream_time: //streams time
    [ Time(%t) ] 
  --[ CurrentTime(%t %+ %1) ]-> 
    [ Time(%t %+ %1), !GetTime(%t %+ %1) ]


restriction CheckTime: //checks whether the time is current
"
  All t t1 #i #j #k. CheckTime(t) @i & CurrentTime(t) @j 
  & CurrentTime(t1) @k & k < i ==> k < j | #k = #j 
"


// The following rule ends the verification timeframe 
// started at t so that the voters will not be able to 
// verify their ballot after t+3. 

rule End_ver: //ends timeframe for individual verification
    [ !GetTime(%t), !GetTime(%t %+ %1 %+ %1 %+ %1) ] 
  --[ EndVer(%t), OnlyOnce(<%t, 'end'>) ]-> 
    [  ]


// In EEV star, all the sessions started by a voter id are 
// labelled by a session counter started for that voter.
// It allows voter to distinguish the sessions for which 
// the ballots were cast. The following rule models a public 
// counter. The values generated with this rule are used by 
// the voters and other parties in the order they were created.  

rule Counter: //starts a public counter
    [ In(ctr) ] 
  --[ Counter(ctr), OnlyOnce(ctr) ]-> 
    [ !SessionCtr(ctr) ]


// VOTING


// In EEV, the voters use their VoteApp to authenticate 
// themselves to VC, and if authenticated, to generate a 
// ballot and submit it to VC. The following rules model 
// the authentication between Voteapp and VC. The VC 
// generates a challenge for the voter authentication. 
// The voter signs the challenge and sends it as a response.
// If VC verifies the signature, it starts a session
// identified by the challenge sid. In EEV star, we replace 
// the challenge with the session counter of the voter and 
// extend it with the timemark received from TMS for that 
// counter, i.e. the VC reads the session counter scid, 
// gets the timemark from TMS and sends <scid, ta> to the 
// voter as a challenge. Note that in the following rule,
// we use fresh term ta to represent the current time, not
// the time represented by !GetTime(ta) for the termination 
// of the Tamarin code.

rule VC_ch: //constructs a challenge for the authentication
  let
      scid = ctr 
  in
    [ !Voter(id), !SessionCtr(ctr), Fr(~ta) ]
  --[ TMS_auth(id, scid, ~ta), VoterCtr_auth(id, scid), 
      OnlyOnce(<id, scid, 'auth'>) ]->
    [ Challenge(id, scid, ~ta), VoterCtr(id, scid), 
      Ch1(<id, scid, ~ta>), Out(~ta) ]


restriction VC_ch_1: //ensures the consistency of the session counter 
"
  All id scid1 scid2 ta1 ta2 #i #j #k #l. Counter(scid1) @i & Counter(scid2) @j 
  & TMS_auth(id, scid1, ta1) @k & TMS_auth(id, scid2, ta2) @l & i < j ==> k < l 
"

restriction VC_ch_2: //ensures the validity of the session counter  
"
  All id scid ta #i. TMS_auth(id, scid, ta) @i ==> Ex #j. Counter(scid) @j 
"


rule Corrupt_VoteApp_resp: //generates a response by signing 
                           //the challenge received from the adversary
  let
      sa = sign(<scid1, ta1, 'auth'>, skid)
  in
    [ In(<scid1, ta1>), /*Ch1(<id, scid, ta>),*/ !EID(id, pkid, skid) ]
  --[  ]->
    [ Response(id, scid1, ta1), Ch2(<id, scid1, ta1, sa>) ]


rule VC_auth: //authenticates the voter after verifying the signature
    [ Ch2(<id, scid, ta, sa>), Challenge(id, scid, ta), !CertID(id, pkid) ]
  --[ Eq(verify(sa, <scid, ta, 'auth'>, pkid), true) ]->
    [ Authenticated(id, scid, ta) ] 


// The following rule models the generation of a ballot by 
// the voter using their corrupt VoteApp. The ballot is the 
// ciphertext c received from the adversary with the attached 
// signature s and zkp p received from the adversary. The
// signature is created using the signing key inside the voter's 
// EID card. Moreover, we label the ballot with a fresh term tv 
// to distinguish the latest ballot cast by the voter. 
// The linear fact State in this rule is used to record the 
// information that is requires to form a QR code when the 
// ballot confirmation is received from VC. 

rule Corrupt_VoteApp_vote: //generates a ballot and sends it to VC
  let 
      s = sign(<c, scid1, ta1, 'vote'>, skid) //signature 
      b = <c, s, p>                           //ballot
  in
    [ In(<c, p, r>), Response(id, scid1, ta1), VoterCtr(id, scid), 
      !EID(id, pkid, skid), !Cand(v), !PkE(pkE), Fr(~tv) ]
  --[ Eq(ver(p, c, pkE, pkid), true),
      Vote(id, v), VoteTime(id, v, ~tv), VoteB(id, b), 
      VoterCtr_vote(id, scid) ]->
    [ State(id, scid, v, r, b, ~tv), Ch3(<id, scid1, b>) ]   


// The following restriction ensures that if the voter continues 
// voting in a session, the next session starts afterwards.

restriction VoteApp_vote: //ensures the consistency of the counter
"
  All id scid1 scid2 #i #j #k. VoterCtr_auth(id, scid1) @i 
  & VoterCtr_auth(id, scid2) @j & VoterCtr_vote(id, scid1) @k 
  & i < j ==> k < j
"


// VC accepts the ballot from the session scid if the voter 
// is authenticated, and the ballot is valid, i.e. the 
// ciphertext received has not been stored for another 
// ballot, the signature of the voter for that ciphertext 
// is valid, and the attached zkp is verified. Then, VC 
// gets a timemark for the accepted ballot from TMS, and 
// starts the TSP protocol to register the ballot, i.e. 
// it generates a registration request for the ballot by 
// signing the message <vid, h(b)> and sends it to RS.    

rule VC_accept: //accepts the ballot, stores it with an identifier,  
                //gets a timemark for the ballot from TMS,
                //and registers the ballot to RS 
  let 
      b = <c, s, p>                  //ballot structure
      req = sign(<~vid, h(b)>, skVC) //registration request
  in
    [ Ch3(<id, scid, b>), Authenticated(id, scid, ta), 
      !CertID(id, pkid), Fr(~vid), !PkE(pkE), 
      !SkVC(skVC), !GetTime(t) ]
  --[ Eq(verify(s, <c, scid, ta, 'vote'>, pkid), true), 
      Eq(ver(p, c, pkE, pkid), true), OnlyOnce(<c, 'accept'>),
      CheckTime(t), TMS_cast(id, scid, b, t), Accept(id, b) ]->
    [ Accepted(id, scid, ta, ~vid, b, t), ChRS1(<~vid, h(b), req>) ]


restriction VC_accept_1: //accepts a ballot for a session before
                         //the next session starts
"
  All id scid1 scid2 ta1 ta2 b1 t1 #i #j #k. TMS_auth(id, scid1, ta1) @i 
  & TMS_auth(id, scid2, ta2) @j & TMS_cast(id, scid1, b1, t1) @k 
  & i < j ==> k < j
"

// In an honest network, VC accepts the ballots in the order 
// they have been cast.

restriction VC_accept_2: //accepts the ballots in the right order
"
  All id b1 b2 #i #j #k #l. VoteB(id, b1) @i & VoteB(id, b2) @j 
  & Accept(id, b1) @k & Accept(id, b2) @l & i < j ==> k < l
"


rule RS_reg: //registers the ballot creating a registration confirmation
  let
      reg = sign(h(<vid, hash>), skRS) //registration confirmation
  in
    [ ChRS1(<vid, hash, req>), !CertVC(pkVC), !SkRS(skRS) ]
  --[ Eq(verify(req, <vid, hash>, pkVC), true) ]->
    [ !Registered(req, reg), ChRS2(reg) ]


// VC stores the ballot if the registration confirmation is
// received from RS within the time interval, i.e. if t is 
// still current. Then, VC sends the ballot confirmation 
// <vid, reg> to the VoteApp. The verification timeframe 
// starts at t for that ballot and ends when the time t
// reaches to t+3. 

rule VC_store: //stores the ballot with registration confirmation 
    [ ChRS2(reg), !CertRS(pkRS), Accepted(id, scid, ta, vid, b, t) ]
  --[ Eq(verify(reg, h(<vid, h(b)>), pkRS), true), CheckTime(t), 
      Store(id, b), OnlyOnce(<id, t, 'store'>) ]->
    [ !Stored(id, scid, ta, vid, b, t, reg), Ch4(<scid, vid, reg>) ]


restriction VC_store: //stores the ballots in the order 
                      //they have been accepted
"
  All id b1 b2 #i #j #k #l. Accept(id, b1) @i & Accept(id, b2) @j 
  & Store(id, b1) @k & Store(id, b2) @l & i < j ==> k < l
"


// Corrupt VoteApp receives the ballot confirmation <vid, reg> 
// from VC, and forms the QR code for the verification of the 
// vote inside the ballot. The fact !Voted records the vote 
// cast by the voter and the QR code (vid, r). To model the 
// individual verification of a coerced voter, we leak the 
// QR code.  

rule Corrupt_VoteApp_vid: //displays a QR code (vid, r) 
    [ Ch4(<scid1, vid, reg>), State(id, scid, v, r, b, tv), !CertRS(pkRS) ]
  --[ /*Eq(verify(reg, h(<vid, h(b)>), pkRS), true)*/ ]->
    [ !Voted(id, scid, v, vid, r, tv), Out(<vid, r>) ]
 

// The voters verify their votes using their VerApp. 
// The VerApp reads the QR code (vid, r), sends vid to 
// VC, and receives the ballot b stored for that vid, 
// the registration confirmation reg, and the session 
// counter scid for which the ballot was cast, if the 
// verification timeframe has not ended for that ballot, 
// and the ballot is the last one stored by VC. The 
// VerApp verifies the validity of the ballot and 
// the registration confirmation, and then uses the 
// randomness r in the QR code to retrieve the vote 
// inside the ballot. It displays the vote retrieved 
// and the session counter scid. If the vote is the one 
// the voter cast and the session counter is correct, 
// the verification is completed. For the verification, 
// we model the communication between VerApp and VC with 
// one rule, regarding the messages exchanged during the 
// communication have not been modified. The voters can 
// verify their votes at most three times with the same vid. 

rule VerApp_ver: //verifies the vote cast with the QR code
  let 
      b = <c, s, p>       //ballot structure
      c1 = enc(v, pkE, r) //encryption of the vote v
  in
    [ !Voted(id, scid, v, vid, r, tv), !CertID(id, pkid),
      !Stored(id, scid, ta, vid, b, t, reg), !PkE(pkE), 
      !CertRS(pkRS) ]
  --[ Eq(verify(reg, h(<vid, h(b)>), pkRS), true),
      Eq(verify(s, <c, scid, ta, 'vote'>, pkid), true),
      Eq(c, c1), CheckVer(t), OnlyOnce(<vid, t>), 
      CheckLast(id, b), Verified(id, v, tv) ]->
    [  ]


restriction VerApp_ver_1: //checks whether the timeframe has ended
"
  All t #i #j. CheckVer(t) @i & EndVer(t) @j ==> i < j 
" 

restriction VerApp_ver_2: //checks whether the ballot to be verified is the last 
"
  All id b b1 #i #j #k. Store(id, b1) @i & Store(id, b) @j 
  & CheckLast(id, b) @k & i < k & j < k ==> i < j | #i = #j
" 


// TALLY


rule IBBP_verify: //verifies each ballot stored by VC, checks 
                  //whether it has the registration confirmation
  let 
      b = <c, s, p> //ballot structure
  in
    [ !Voter(id), !CertID(id, pkid), !Stored(id, scid, ta, vid, b, t, reg), 
      !Registered(req, reg), !PkE(pkE), !CertVC(pkVC), !CertRS(pkRS) ]
  --[ Eq(verify(s, <c, scid, ta, 'vote'>, pkid), true), 
      Eq(ver(p, c, pkE, pkid), true),
      Eq(verify(req, <vid, h(b)>, pkVC), true), 
      Eq(verify(reg, h(<vid, h(b)>), pkRS), true) ]->
    [ !IBBPVerified(id, scid, ta, vid, b, t, reg) ]


rule IBBP_tally: //selects the last ballot stored for the voter id
    [ !IBBPVerified(id, scid, ta, vid, b, t, reg) ]
  --[ BB_tally(id, b), OnlyOnce(<id, 'tally'>) ]->
    [  ]


restriction IBBP_tally: //selects the last ballot stored for the voter id
"
  All id b b1 #i #j #k. Store(id, b1) @i & Store(id, b) @j 
  & BB_tally(id, b) @k ==> i < j | b = b1
"


// OTHER RESTRICTIONS


restriction OnlyOnce:
" 
  All x #i #j. OnlyOnce(x) @i & OnlyOnce(x) @j ==> #i = #j
"
restriction Equality:
"
  All x y #i. Eq(x, y) @i ==> x = y
"


// LEMMA TO CHECK BALLOT INTEGRITY


lemma Ballot_Integrity:
"
  All id b #i. BB_tally(id, b) @i 
  ==> ( Ex #j. VoteB(id, b) @j ) | ( Ex #j. Corr(id) @j )
" 


// LEMMAS TO CHECK E2E VERIFIABILITY 


lemma Individual_Verifiability_1:
"
  All id v t c s p pkE #i #j #k. Verified(id, v, t) @i 
  & BB_tally(id, <c, s, p>) @j & BB_key(pkE) @k
  & ( All v1 t1 #l1 #l2. VoteTime(id, v1, t1) @l1 & VoteTime(id, v, t) @l2 
      ==> l1 < l2 | #l1 = #l2 )    
  ==> ( Ex r. c = enc(v, pkE, r) ) 
    | ( Ex #l. Corr(id) @l )
"

lemma Individual_Verifiability_3:
"
  All id v t #i. Verified(id, v, t) @i ==> Ex #j. BB_reg(id) @j 
"

lemma Eligibility_Verifiability:
"
  All id b #i. BB_tally(id, b) @i ==> Ex #j. BB_reg(id) @j 
" 

lemma Result_Integrity_1:
"
  All id c s p pkE #i #j. BB_tally(id, <c, s, p>) @i & BB_key(pkE) @j    
  ==> ( Ex v r #k. Vote(id, v) @k & c = enc(v, pkE, r) )
    | ( Ex #k. Corr(id) @k )
" 

lemma Result_Integrity_2:
"
  All id c s p pkE #i #j. BB_tally(id, <c, s, p>) @i & BB_key(pkE) @j    
  ==> ( Ex v r #k. Vote(id, v) @k & c = enc(v, pkE, r) )
    | ( Ex #k. Corr(id) @k )
    | not( Ex v t #k. Verified(id, v, t) @k 
  & ( All v1 t1 #l1 #l2. VoteTime(id, v1, t1) @l1 & VoteTime(id, v, t) @l2 
      ==> l1 < l2 | #l1 = #l2 ) ) 
" 

lemma Consistency_One:
" 
  All id b b1 #i #j. BB_tally(id, b) @i & BB_tally(id, b1) @j ==> #i = #j  
"

end